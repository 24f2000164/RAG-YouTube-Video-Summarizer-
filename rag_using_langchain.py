# -*- coding: utf-8 -*-
"""rag_using_langchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q7zMHfecBtm0bgy4JwU-XAigjIIxHqlC
"""

import os
os.environ["OPENAI_API_KEY"] = "api key"

"""## Install libraries"""

 



from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled,NoTranscriptFound
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate

from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import NoTranscriptFound, TranscriptsDisabled
import logging

# Enable logging to see detailed errors
logging.basicConfig(level=logging.INFO)

video_id = "PieZjz2Pyhw"  # No trailing '&'

try:
    # Fetch transcript directly (skip XML parsing)
    transcript = YouTubeTranscriptApi.get_transcript(
        video_id,
        languages=['en'],
        proxies=None,  # Try with/without proxies if behind a firewall
        cookies=None   # Try adding cookies if needed
    )
    print(" ".join([t['text'] for t in transcript]))

except TranscriptsDisabled:
    print("Captions disabled for this video.")
except NoTranscriptFound:
    print("No English captions found.")
except Exception as e:
    print(f"Failed to fetch: {str(e)}")

"""## Step 1a - Indexing (Document Ingestion)"""

video_id = "bSDprg24pEA"
try:
    # List all available caption languages
    transcripts = YouTubeTranscriptApi.list_transcripts(video_id)

    print("Available languages:")
    for transcript in transcripts:
        print(f"- {transcript.language_code} ({transcript.language})")

    # Fetch the first available transcript
    transcript = transcripts.find_transcript(['en'])
    print("\nTranscript:", " ".join([t['text'] for t in transcript.fetch()]))

except Exception as e:
    print(f"Error: {str(e)}")

video_id = "bSDprg24pEA" # only the ID, not full URL
try:
    # If you don’t care which language, this returns the “best” one
    transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=["en"])


    # Flatten it to plain text
    transcript = " ".join(chunk["text"] for chunk in transcript_list)
    print(transcript)
except TranscriptsDisabled:
    print("Captions are disabled for this video.")
except NoTranscriptFound:
    print("No English captions available for this video.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

transcript_list

"""## Step 1b - Indexing (Text Splitting)"""

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = splitter.create_documents([transcript])

len(chunks)

chunks[100]

"""## Step 1c & 1d - Indexing (Embedding Generation and Storing in Vector Store)"""

embeddings = OpenAIEmbeddings(model="text-embedding-3-small")
vector_store = FAISS.from_documents(chunks, embeddings)

vector_store.index_to_docstore_id

vector_store.get_by_ids(['2436bdb8-3f5f-49c6-8915-0c654c888700'])

"""## Step 2 - Retrieval"""

retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 4})

retriever

retriever.invoke('What is deepmind')

"""## Step 3 - Augmentation"""

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)

prompt = PromptTemplate(
    template="""
      You are a helpful assistant.
      Answer ONLY from the provided transcript context.
      If the context is insufficient, just say you don't know.

      {context}
      Question: {question}
    """,
    input_variables = ['context', 'question']
)

question          = "is the topic of nuclear fusion discussed in this video? if yes then what was discussed"
retrieved_docs    = retriever.invoke(question)

retrieved_docs

context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
context_text

final_prompt = prompt.invoke({"context": context_text, "question": question})

final_prompt

"""## Step 4 - Generation"""

answer = llm.invoke(final_prompt)
print(answer.content)

"""## Building a Chain"""

from langchain_core.runnables import RunnableParallel, RunnablePassthrough, RunnableLambda
from langchain_core.output_parsers import StrOutputParser

def format_docs(retrieved_docs):
  context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
  return context_text

parallel_chain = RunnableParallel({
    'context': retriever | RunnableLambda(format_docs),
    'question': RunnablePassthrough()
})

parallel_chain.invoke('who is Demis')

parser = StrOutputParser()

main_chain = parallel_chain | prompt | llm | parser

main_chain.invoke('Can you summarize the video')

